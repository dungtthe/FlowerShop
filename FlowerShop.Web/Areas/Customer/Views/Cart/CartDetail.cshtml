@using FlowerShop.Web.ViewModels
@using FlowerShop.Common.Helpers
@model List<CartDetailViewModel>

<style>
	#btnSendToCheckout:hover {
		background-color: brown !important;
	}
</style>

<div class="container-fluid py-5">
	<div class="container py-5">
		<div class="table-responsive">
			<table class="table">
				<thead>
					<tr>
						<th scope="col" class="text-center" style="width: 50px;">
							<input onclick="HandleClickToCheckAll()" type="checkbox" class="form-check-input"
								   id="checkAll">
						</th>
						<th scope="col" class="text-center" style="width: 100px;">Hình ảnh</th>
						<th scope="col" class="text-center">Tên sản phẩm</th>
						<th scope="col" class="text-center">Đơn giá</th>
						<th scope="col" class="text-center">Số lượng mua</th>
						<th scope="col" class="text-center">Số lượng tồn</th>
						<th scope="col" class="text-center"> Thành tiền</th>
						<th scope="col" class="text-center" style="width: 40px;"></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model)
					{
						<tr>
							<td class="text-center align-middle">
								<input onclick="HandleClickToCheckBox()" type="checkbox"
									   class="form-check-input product-checkbox" data-product-id="@item.ProductId">
								@* quy tắc đặt tên của html5 k nên có chữ hoa, với cái data này lúc muốn truy cập thì truy cập qua productId *@
							</td>
							<th scope="row" onclick="HandlerDetailProduct(@item.ProductId)">
								<div class="d-flex justify-content-center align-items-center">
									@if (item.ProductImage.Contains("http"))
									{
										<img src="@item.ProductImage" class="img-fluid rounded-circle"
											 style="width: 80px; height: 80px;" alt="ảnh sản phẩm">
									}
									else
									{
										<img src="@Url.Content("~/images/products/" + item.ProductImage)"
											 class="img-fluid rounded-circle" style="width: 80px; height: 80px;"
											 alt="ảnh sản phẩm">
									}
								</div>
							</th>
							<td class="text-center">
								<p class="mb-0 mt-4">@item.ProductName</p>
							</td>
							<td class="text-center">
								<p data-price-sell=@item.PriceSell class="price-sell mb-0 mt-4">
									@Converter.ConvertToVietnameseDong(item.PriceSell ?? 0)
								</p>
							</td>
							<td>
								<div class="input-group quantity mt-4 mx-auto" style="width:100px;">
									<input oninput="updateQuantityOninput(this)" onblur="updateQuantityOnblur(this)"
										   type="number" style="padding-left: 20px;"
										   class="quantity-in-cart form-control form-control-sm text-center border-0"
										   value="@item.QuantityInCart">
								</div>
							</td>
							<td class="text-center">
								<p id="quantity-in-stock" class="mb-0 mt-4">@item.QuantityInStock</p>
							</td>
							<td class="text-center">
								<p class="total-price mb-0 mt-4">
									@Converter.ConvertToVietnameseDong((item.PriceSell ?? 0) * item.QuantityInCart)
								</p>
							</td>
							<td class="text-center">
								<button onclick="DeleteProductFromCart(@item.ProductId)"
										class="btn btn-md rounded-circle bg-light border mt-4">
									<i class="fa fa-times text-danger"></i>
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
			<!-- Phần tính tổng tiền -->
			<div class="row justify-content-end mt-4" style="margin-right: 1px;">
				<div class="col-lg-4">
					<div class="card">
						<div class="card-body">
							<div class="d-flex justify-content-between mb-3">
								<h6>Số sản phẩm chọn</h6>
								<span id="count-selected-products">0</span>
							</div>
							<div class="d-flex justify-content-between mb-3">
								<h6>Tổng tiền</h6>
								<span id="total-price-all">0</span>
							</div>
							<button id="btnSendToCheckout" onclick="SendToCheckout()" class="btn w-100"
									style="color: aliceblue !important; background-color: rgb(94, 21, 21);  ">
								Mua
								hàng
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>

	const HandlerDetailProduct = (id) => {
		const uri = "/product/detail?id=" + id;
		window.location.href = uri;
	}

	const convertToVietnameseDong = (amount) => {
		return amount.toLocaleString('de-DE') + ' đ';
	}
	const DeleteProductFromCart = (productId) => {
		showQuestion("Bạn muốn xóa sản phẩm này khỏi giỏ hàng chứ?", () => {
			const uri = `/api/cart/delete?id=${productId}`;
			fetchGet(
				uri,
				(success) => {
					const buttonElement = document.querySelector(`button[onclick="DeleteProductFromCart(${productId})"]`);
					if (buttonElement) {
						const rowElement = buttonElement.closest('tr');
						if (rowElement) {
							rowElement.remove();
						}
					}
				},
				(fail) => {
					alert(fail.message);
				},
				() => {
					alert("có lỗi xảy ra");
				}
			);
		});
	}

	const updateQuantityOninput = (input) => {
		// Lấy ra row chứa input
		const row = input.closest('tr');
		const priceSell = row.querySelector('.price-sell').dataset.priceSell;

		const quantityInStock = parseInt(row.querySelector('#quantity-in-stock').textContent);
		if (parseInt(input.value) > quantityInStock) {
			input.value = quantityInStock;
		}
		if (parseInt(input.value) < 1) {
			input.value = 1;
		}
		const totalPrice = priceSell * input.value;

		row.querySelector('.total-price').textContent = convertToVietnameseDong(totalPrice);
	}

	const updateQuantityOnblur = (input) => {
		// Đặt lại giá trị là 1 nếu input rỗng
		if (!input.value) {
			input.value = 1;
			// Cập nhật lại thành tiền
			updateQuantityOninput(input);
		}
	}
	const UpdateTotalPrices = () => {
		const checkboxes = document.querySelectorAll("tbody .product-checkbox");
		let count = 0;
		let total = 0;
		for (var checkbox of checkboxes) {
			if (checkbox.checked) {
				count++;
				//   const productId = checkbox.dataset.productId; // Lấy giá trị data-product-id
				const row = checkbox.closest('tr'); // Lấy hàng chứa checkbox
				const priceSell = row.querySelector('.price-sell').dataset.priceSell;
				const quantityInCart = row.querySelector('.quantity-in-cart').value;
				total += priceSell * quantityInCart;
			}
		}
		document.querySelector('#count-selected-products').textContent = count;
		document.querySelector('#total-price-all').textContent = convertToVietnameseDong(total);
	}

	const HandleClickToCheckAll = () => {
		const checkAll = document.getElementById('checkAll');
		var checkboxes = document.getElementsByClassName('product-checkbox');
		for (var checkbox of checkboxes) {
			checkbox.checked = checkAll.checked;
		}
		UpdateTotalPrices();
	}
	const HandleClickToCheckBox = () => {

		UpdateTotalPrices();
	}

	const SendToCheckout = () => {
		const rows = document.querySelectorAll('tbody tr');
		let productsId = [];
		let quantities = [];
		for (const row of rows) {
			const checkBox = row.querySelector(".product-checkbox");
			if (!checkBox.checked) {
				continue;
			}
			const productId = checkBox.dataset.productId;
			const quantityInCart = parseInt((row.querySelector(".quantity-in-cart").value));
			productsId.push(parseInt(productId));
			quantities.push(quantityInCart);
		}

		//console.log(productsId);
		//console.log(quantities);

		const data = {
			productsId,
			quantities
		};
		const uri = "/api/cart/checkout";
		fetchPost(
			uri,
			data,
			//sus
			() => {
				window.location.href = `/cart/checkout`;
			},
			//fail
			(data) => {
				showError(data.message);
			},
			//excep
			() => {
				showError("Có lỗi xảy ra");
			}
		);
	}
</script>