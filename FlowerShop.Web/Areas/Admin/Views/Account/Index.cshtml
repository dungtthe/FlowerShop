@model FlowerShop.DataAccess.Models.AppUser
@using Newtonsoft.Json;
@{
	string[] listImg = Model.Images != null
	? JsonConvert.DeserializeObject<string[]>(Model.Images)
	: new string[] { "no_img.png" };

	var firstImg = listImg[0];
}

<style>
	.img-thumbnail {
		box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
		width: auto;
		object-fit: cover;
		/* Đảm bảo ảnh không bị méo */
		display: block;
		margin: 0 auto;
	}

	.card {
		box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
	}

	.card-header {
		background-color: #007bff;
		color: white;
		font-weight: bold;
	}

	.btn {
		margin-right: 10px;
	}

	.form-group {
		display: flex;
		align-items: center;
		margin-bottom: 15px;
	}

	.form-group label {
		width: 140px;
		/* Chiều rộng nhãn */
		margin-right: 10px;
	}

	.input-container {
		flex-grow: 1;
	}

	.input-container span,
	.input-container input {
		width: 100%;
	}

	.input-container input {
		margin-bottom: 0;
	}

	.image-wrapper {
		display: inline-block;
		width: 150px;
		/* Kích thước khung */
		height: 150px;
		/* Kích thước khung */
		border: 5px solid #007bff;
		/* Độ dày và màu khung */
		border-radius: 50%;
		/* Làm tròn hoàn toàn */
		overflow: hidden;
		/* Cắt hình ảnh nếu vượt quá khung */
		box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
		/* Đổ bóng */
		margin-bottom: 10px;
		/* Khoảng cách giữa ảnh và nút */
	}

	#changeImageButton {
		width: 150px;
		/* Kích thước nút khớp với kích thước ảnh */
		text-align: center;
	}

	.image-wrapper img {
		width: 100%;
		/* Đảm bảo ảnh vừa khung */
		height: 100%;
		/* Đảm bảo ảnh vừa khung */
		object-fit: cover;
		/* Đảm bảo ảnh không bị méo */
	}

	.col-lg-4 {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: flex-start;
		/* Đảm bảo nút luôn nằm phía dưới avatar */
	}
</style>

<div class="card shadow mb-4">
	<div class="card-body">
		<h2 class="text-left" style="margin: 0">Thông tin tài khoản</h2>
	</div>
</div>

<div class="row align-items-center">
	<div class="col-lg-4 text-center d-flex flex-column align-items-center">
		<label for="profileImageInput" class="image-wrapper">
			<img id="profileImage" src="@Url.Content("~/images/users/" + firstImg)" class="img-thumbnail rounded-circle"
				alt="Avatar">
		</label>
		<!-- Nút thay đổi ảnh -->
		<button id="changeImageButton" style="display:none;" class="btn btn-primary mt-3" onClick="triggerFileInput()">
			Thay đổi ảnh
		</button>
		<input id="profileImageInput" type="file" accept="image/*" style="display:none;"
			onChange="handleImageUpload(event)">
	</div>

	<div class="col-lg-8">
		<div class="card">
			<div class="card-header text-white bg-primary">Thông tin cá nhân</div>
			<div class="card-body" id="userInfoBody">
				<div class="form-group d-flex align-items-center">
					<label><strong>Họ và tên:</strong></label>
					<div class="input-container">
						<span class="view-mode" id="viewFullName">@Model.FullName</span>
						<input type="text" name="FullName" class="form-control edit-mode" style="display: none;"
							value="@Model.FullName" onInput="validateInputs()">
						<small class="text-danger validation-message fullName"></small>
					</div>
				</div>
				<div class="form-group d-flex align-items-center">
					<label><strong>Ngày sinh:</strong></label>
					<div class="input-container">
						<span id="viewBirthDay" class="view-mode">@Model.BirthDay?.ToString("dd/MM/yyyy")</span>
						<input type="date" name="BirthDay" class="form-control edit-mode" style="display: none;"
							value="@Model.BirthDay?.ToString("yyyy-MM-dd")" onInput="validateInputs()">
						<small class="text-danger validation-message birthDay"></small>
					</div>
				</div>
				<div class="form-group d-flex align-items-center">
					<label><strong>Email:</strong></label>
					<div class="input-container">
						<span id="viewEmail" class="view-mode">@Model.Email</span>
						<input type="email" name="Email" class="form-control edit-mode" style="display: none;"
							value="@Model.Email" onInput="validateInputs()">
						<small class="text-danger validation-message email"></small>
					</div>
				</div>
				<div class="form-group d-flex align-items-center">
					<label><strong>Số điện thoại:</strong></label>
					<div class="input-container">
						<span id="viewPhoneNumber" class="view-mode">@Model.PhoneNumber</span>
						<input type="text" name="PhoneNumber" class="form-control edit-mode" style="display: none;"
							value="@Model.PhoneNumber" onInput="validateInputs()">
						<small class="text-danger validation-message phoneNumber"></small>
					</div>
				</div>
			</div>
		</div>
		<div class="mt-4">
			<button id="editButton" class="btn btn-success" onClick="enableEditMode()">Chỉnh sửa thông tin</button>
			<button id="saveButton" class="btn btn-success" style="display: none; min-width:90px; "
				onClick="saveChanges()">
				Lưu
			</button>
			<button id="cancelButton" class="btn btn-danger" style="display: none; min-width:90px; "
				onClick="cancelEdit()">
				Hủy
			</button>
		</div>
	</div>
</div>

<script>
	let selectedImageBytes = null;//bổ trợ lưu ảnh
	const convertFileToByteArray = (file, callback) => {
		const reader = new FileReader();
		reader.onload = function (event) {
			const arrayBuffer = event.target.result;
			const byteArray = new Uint8Array(arrayBuffer);
			callback(byteArray); // Trả về mảng byte qua callback
		};
		reader.readAsArrayBuffer(file); // Đọc file dưới dạng ArrayBuffer
	}

	let initialImageName = "no_img.png"; // Tên ảnh mặc định ban đầu (cập nhật khi tải trang)
	let originalValues = [];
	let originalAvatar = document.getElementById("profileImage").src;
	document.addEventListener("DOMContentLoaded", function () {
		const profileImage = document.getElementById("profileImage");

		// Lấy tên ảnh hiện tại từ `src` khi tải trang
		initialImageName = profileImage.src.split("/").pop();
		console.log("Tên ảnh hiện tại:", initialImageName);
	});
	//hàm cho nút sửa
	function enableEditMode() {
		document.querySelectorAll(".view-mode").forEach(el => el.style.display = "none");
		document.querySelectorAll(".edit-mode").forEach(el => el.style.display = "block");
		document.getElementById("saveButton").style.display = "inline-block";
		document.getElementById("cancelButton").style.display = "inline-block";
		document.getElementById("editButton").style.display = "none";
		document.getElementById("changeImageButton").style.display = "inline-block";
		originalValues = Array.from(document.querySelectorAll(".edit-mode")).map(input => input.value);
	}

	//Hàm cho nút hủy
	function cancelEdit() {
		document.querySelectorAll(".edit-mode").forEach((input, index) => {
			input.value = originalValues[index];
		});
		document.getElementById("profileImage").src = originalAvatar;

		document.querySelectorAll(".view-mode").forEach(el => el.style.display = "block");
		document.querySelectorAll(".edit-mode").forEach(el => el.style.display = "none");
		document.getElementById("saveButton").style.display = "none";
		document.getElementById("cancelButton").style.display = "none";
		document.getElementById("editButton").style.display = "inline-block";
		document.getElementById("changeImageButton").style.display = "none";
	}

	function triggerFileInput() {
		// Kích hoạt hành động chọn tệp của thẻ input
		document.getElementById("profileImageInput").click();
	}

	function handleImageUpload(event) {
		const file = event.target.files[0]; // Lấy tệp đã chọn
		if (file && file.type.startsWith("image/")) {
			const reader = new FileReader();
			reader.onload = function (e) {
				document.getElementById("profileImage").src = e.target.result; // Cập nhật ảnh
				convertFileToByteArray(file, (byteArray) => {
					selectedImageBytes = byteArray; // Lưu mảng byte vào biến toàn cục
					//console.log("Mảng byte đã lưu:", selectedImageBytes);
				});
			};
			reader.readAsDataURL(file);
		} else {
			alert("Vui lòng chọn một tệp hình ảnh hợp lệ.");
		}
	}

	//Hàm báo lỗi
	function validateInputs() {
		let isValid = true;
		const fullNameInput = document.querySelector(".edit-mode[name='FullName']");
		const fullNameError = document.querySelector(".validation-message.fullName");
		if (!fullNameInput.value.trim()) {
			fullNameError.textContent = "Tên không được để trống.";
			isValid = false;
		} else {
			fullNameError.textContent = "";
		}
		// Số điện thoại hợp lệ
		const phoneInput = document.querySelector(".edit-mode[name='PhoneNumber']");
		const phoneError = document.querySelector(".validation-message.phoneNumber");
		const phoneRegex = /^0\d{9}$/;
		if (!phoneInput.value.trim()) {
			phoneError.textContent = "Số điện thoại không được để trống.";
			isValid = false;
		} else if (!phoneRegex.test(phoneInput.value)) {
			phoneError.textContent = "Số điện thoại phải bắt đầu bằng 0 và đủ 10 số.";
			isValid = false;
		} else {
			phoneError.textContent = "";
		}

		// Ngày sinh không được để trống
		const birthDayInput = document.querySelector(".edit-mode[name='BirthDay']");
		const birthDayError = document.querySelector(".validation-message.birthDay");
		if (!birthDayInput.value) {
			birthDayError.textContent = "Ngày sinh không được để trống.";
			isValid = false;
		} else {
			birthDayError.textContent = "";
		}
		const emailInput = document.querySelector(".edit-mode[name='Email']");
		const emailError = document.querySelector(".validation-message.email");
		if (!emailInput.value.trim()) {
			emailError.textContent = "Email không được để trống.";
			isValid = false;
		} else {
			emailError.textContent = "";
		}

		document.getElementById("saveButton").disabled = !isValid;
	}

	function saveChanges() {
		if (validateInputs()) return;
		const updatedUser = {
			FullName: document.querySelector(".edit-mode[name='FullName']").value,
			BirthDay: document.querySelector(".edit-mode[name='BirthDay']").value,
			Email: document.querySelector(".edit-mode[name='Email']").value,
			PhoneNumber: document.querySelector(".edit-mode[name='PhoneNumber']").value,
			BytesImage: null
		};
		let bytesArray = null;
		const profileImageInput = document.getElementById("profileImageInput");
		if (profileImageInput.files[0]) {
			//updatedUser.Image = profileImageInput.files[0].name; // Lấy tên tệp ảnh
			bytesArray = selectedImageBytes;
		} else {
			//	updatedUser.Image = initialImageName; // Nếu không có tệp, đặt giá trị mặc định
		}
		console.log("Thông tin người dùng cần lưu:", updatedUser);

		if (bytesArray != null) {
			updatedUser.BytesImage = "";
			for (const item of bytesArray) {
				updatedUser.BytesImage += item + ",";
			}
		}
		// Gửi yêu cầu cập nhật thông tin qua API
		fetchPost(
			`/api/admin/quan-li-tai-khoan/cap-nhat-thong-tin`,
			updatedUser
			,
			(data) => {
				document.getElementById("viewFullName").textContent = updatedUser.FullName;
				document.getElementById("viewBirthDay").textContent = new Date(updatedUser.BirthDay).toLocaleDateString('vi-VN');
				document.getElementById("viewEmail").textContent = updatedUser.Email;
				document.getElementById("viewPhoneNumber").textContent = updatedUser.PhoneNumber;

				// Chuyển sang chế độ xem
				document.querySelectorAll(".view-mode").forEach(el => el.style.display = "block");
				document.querySelectorAll(".edit-mode").forEach(el => el.style.display = "none");

				document.getElementById("editButton").style.display = "inline-block";
				document.getElementById("saveButton").style.display = "none";
				document.getElementById("cancelButton").style.display = "none";
				document.getElementById("changeImageButton").style.display = "none";

				setTimeout(() => {
					showSuccess(data.message);
				}, 500);
			},
			(error) => {
				showError(error.message);
			},
			() => {
				showError("Có lỗi xảy ra khi kết nối đến máy chủ.");
			}
		);
	}
</script>