@model IEnumerable<FlowerShop.Web.ViewModels.ProductItemViewModel>
@using Newtonsoft.Json;
@using FlowerShop.Common.Helpers;
@{
    ViewData["Title"] = "Danh sách sản phẩm trong kho";
    int stt = 1;
}

<h3>@ViewData["Title"]</h3>


<style>
    .section-search {
        background-color: #C1CDC1;
        height: 36px;
        width: 500px;
        position: relative;
        left: 1100px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        padding-left: 10px;
    }

    .section-search .inner-wrap {
        display: flex;
        align-items: center;
    }

    .section-search .inner-icon {
        margin-right: 10px;
    }

    .section-search input {
        border: none;
        background-color: #C1CDC1;
        outline: none;
    }
</style>

<div class="section-search">
    <div class="inner-wrap">
        <div class="inner-icon">
            <i class="fa-solid fa-magnifying-glass"></i>
        </div>
        <div class="inner-input">
            <input oninput="SearchProductItem(this.value)" type="text" placeholder="Nhập nội dung tìm kiếm">
        </div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                STT
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ImportPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Images)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody id="product-table-body">
        @foreach (var item in Model)
        {
            <tr id="product-row-@item.Id" class="product-row">
                <td>
                    @(stt++)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.Category.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    @{
                        var priceConverted = Converter.ConvertToVietnameseDong(item.ImportPrice);
                    }
                    @Html.DisplayFor(modelItem => priceConverted)
                </td>

                <td>
                    @{
                        string[] listImg = item.Images != null
                        ? JsonConvert.DeserializeObject<string[]>(item.Images)
                        : new string[] { "no_img.png" };

                        var firstImg = listImg[0];
                    }
                    <img src="@Url.Content("~/images/products/" + firstImg)" alt="Product Image"
                        style="width: 70px; height: 70px; object-fit: cover;" />
                </td>

                <td>
                    <a asp-action="Edit" asp-area="Admin" asp-controller="ProductItem" asp-route-id="@item.Id"><i
                            class="fa-solid fa-circle-info"></i></a> |
                    @*         <a asp-action="Delete" asp-area="Admin" asp-controller="ProductItem" asp-route-id="@item.Id"><i
                            class="fa-solid fa-trash" style="color:red;"></i></a> *@

                    <button onclick="DeleteProductItemById(@item.Id)" class="bg-transparent" style="border: none;">
                        <i class="fa-solid fa-trash" style="color:red;"></i>
                    </button>

                </td>
            </tr>
        }
    </tbody>
</table>
<script>
    const DeleteProductItemById = (id) => {
        showConfirm("Bạn có muốn xóa sản phẩm này không?", () => {
            const reqData = { id: id };

            fetchDelete('/api/admin/quan-li-kho/delete', reqData,
                (responeData) => {

                    // Xóa dòng trong bảng
                    const row = document.getElementById('product-row-' + id);
                    if (row) {
                        row.remove();
                    }
                    updateRowNumbers();
                    setTimeout(() => {
                        showSuccess(responeData.message);
                    }, 500);

                }, (responeData) => {
                    showError(responeData.message);
                }, () => {
                    showError("Có lỗi xảy ra");
                });
        });
    }


    // Cập nhật lại số thứ tự (STT) cho tất cả các sản phẩm còn lại
    const updateRowNumbers = () => {
        let rows = document.querySelectorAll('table tbody tr');
        rows.forEach((row, index) => {
            const sttCell = row.querySelector('td:first-child');
            if (sttCell) {
                sttCell.textContent = index + 1;
            }
        });
    }


    //tìm kiếm sản phẩm 
    const SearchProductItem = (noidung) => {
        const searchTerm = noidung.toLowerCase();
        const rows = document.querySelectorAll('#product-table-body .product-row');
        rows.forEach(row => {
            const productName = row.querySelector('td:nth-child(2)').textContent.toLowerCase(); // Lấy tên sản phẩm (cột 2)

            if (productName.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

</script>