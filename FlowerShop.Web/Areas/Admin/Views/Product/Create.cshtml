@model FlowerShop.Web.ViewModels.CreateProductViewModel
@using Newtonsoft.Json;
@using FlowerShop.Common.Helpers;
@using FlowerShop.DataAccess.Models
@{
    ViewData["Title"] = "Thêm sản phẩm để bán";

    var ProductsItem = ViewBag.ProductsItem as IEnumerable<ProductItem>;
    var categoryInStock = ViewBag.categoryInStock as IEnumerable<Category>;
    var stt = 1;
}

<style>
    .box-input .box-item {
        width: 600px;
    }

    .dropdown-menu {
        max-height: 300px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: #888 #e0e0e0;
    }

    .dropdown button {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 50px;
        width: 250px;
    }

    .control-label {
        margin: 0;
        text-align: center;
    }

    .section-search {
        background-color: #C1CDC1;
        height: 36px;
        width: 350px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        padding-left: 10px;
    }

    .section-search .inner-wrap {
        display: flex;
        align-items: center;
    }

    .section-search .inner-icon {
        margin-right: 10px;
    }

    .section-search input {
        border: none;
        background-color: #C1CDC1;
        outline: none;
    }
</style>

<h1>@ViewData["Title"]</h1>
<hr />
<div class="row">
    <div class="col-6">
        <div class="box-input">
            <div class="box-item">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                @* <span asp-validation-for="Title" class="text-danger"></span> *@
                <span id="errorTitle" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                @* <span asp-validation-for="Description" class="text-danger"></span> *@
                <span id="errorDescription" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="PriceDefault" class="control-label"></label>
                <input asp-for="PriceDefault" class="form-control" />
                @*  <span asp-validation-for="PriceDefault" class="text-danger"></span> *@
                <span id="errorPriceDefault" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" />
                @*   <span asp-validation-for="Quantity" class="text-danger"></span> *@
                <span id="errorQuantity" class="text-danger"></span>
            </div>
            <div class="box-item mb-2 mt-1">
                <div class="dropdown">
                    <button style="height:50px;" class="btn dropdown-toggle btn-secondary" type="button"
                        id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <label asp-for="CategoriesId" class="control-label"></label>
                    </button>
                    <div class="dropdown-menu dropdown-checkbox" aria-labelledby="dropdownMenuButton">
                        @foreach (var subCategory in ViewBag.categories)
                        {
                            <label class="dropdown-item" onclick="event.stopPropagation();">
                                <input type="checkbox" class="mr-2" name="SelectedSubCategories" value="@subCategory.Id" />
                                @subCategory.Name
                            </label>
                        }
                    </div>
                </div>
                <span id="errorCategoriesId" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="PackagingId" class="control-label"></label>
                <button class="btn btn-info btn-sm" onclick="RedirectToAddPackaging()"><i
                        class="fa-solid fa-plus"></i></button>
                <select asp-for="PackagingId" class="form-control" asp-items="ViewBag.packagings"></select>
                <span id="errorPackaging" class="text-danger"></span>
            </div>
        </div>

        <div class="box-productsitem">

            <table class="table">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>Tên sản phẩm</th>
                        <th>Giá</th>
                        <th>Số lượng</th>
                        <th>Thành tiền</th>
                        <th>Hình ảnh</th>
                        <th>Xóa</th>
                    </tr>
                </thead>
                <tbody id="selectedProductsTable">
                    <!-- Các sản phẩm được thêm sẽ hiển thị ở đây -->
                </tbody>
            </table>
            <div class="text-right font-weight-bold mt-3">
                <button style="font-size: 10px;" onclick="copyTotalToClipboard()" class="btn btn-primary mb-2"><i
                        class="fa-regular fa-copy"></i></button>
                Tổng tiền: <span id="totalAmount">0</span> VND
            </div>




        </div>
        <div>
            <span id="errorProductsItem" class="text-danger"></span>
        </div>
        <button class="btn btn-success" onclick="CreateProduct()">Đồng ý</button>

    </div>
    <div class="col-6">

        <div style="display: flex;">
            <h3>Sản phẩm trong kho</h3>
        </div>

        <div class="section-filter" style="display: flex; justify-content: space-between; align-items: center;">
            <div class="section-filter-by-category">
                <select onchange="HanlderFilterProductItem()" style="border: 0.5px solid #C1CDC1; border-radius: 5px;">
                    <option data-idcategory="-1">Tất cả</option>
                    @foreach (var item in categoryInStock)
                    {
                        <option data-idcategory=@item.Id>@item.Name</option>
                    }
                </select>
            </div>
            <div class="section-search">
                <div class="inner-wrap">
                    <div class="inner-icon">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </div>
                    <div class="inner-input">
                        <input oninput="HanlderFilterProductItem()" type="text" placeholder="Nhập nội dung tìm kiếm">
                    </div>
                </div>
            </div>
        </div>


        <table class="table">
            <thead>
                <tr>
                    <th>
                        STT
                    </th>
                    <th>
                        Tên sản phẩm
                    </th>
                    <th>
                        Giá nhập
                    </th>
                    <th>
                        Số lượng tồn
                    </th>
                    <th>
                        Hình ảnh
                    </th>

                </tr>
            </thead>
            <tbody id="product-table-body">
                @foreach (var item in ProductsItem)
                {
                    <tr data-id="@item.Id" id="product-row-@item.Id" class="product-row" data-idcategory="@item.CategoryId">
                        <td>
                            @(stt++)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @{
                                var priceConverted = Converter.ConvertToVietnameseDong(item.ImportPrice);
                            }
                            @Html.DisplayFor(modelItem => priceConverted)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Quantity)
                        </td>
                        <td>
                            @{
                                string[] listImg = item.Images != null
                                ? JsonConvert.DeserializeObject<string[]>(item.Images)
                                : new string[] { "no_img.png" };

                                var firstImg = listImg[0];
                            }
                            <img src="@Url.Content("~/images/products/" + firstImg)" alt="Product Image"
                                style="width: 70px; height: 70px; object-fit: cover;" />
                        </td>
                        <td>
                            <button class="btn btn-info"
                                onclick="AddProductItemToProduct(@item.Id, '@item.ImportPrice', @item.Quantity)">
                                <i class="fa-solid fa-plus"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }


    <script>


        //phần thêm cách đóng gói
        const RedirectToAddPackaging = () => {
            alert("hi");
        };


        //phần add ProductItem vào Product
        let selectedProducts = []; // Lưu danh sách sản phẩm đã chọn

        // Thêm sản phẩm từ kho vào danh sách sản phẩm để bán
        const AddProductItemToProduct = (id, price, quantityInStock) => {
            const existingProduct = selectedProducts.find(product => product.id === id);

            if (existingProduct) {
                if (existingProduct.quantity + 1 > quantityInStock) {
                    showErrorForValidation(existingProduct.id, `Không thể thêm sản phẩm. Số lượng tồn kho chỉ còn ${quantityInStock}.`);
                    return;
                }
                existingProduct.quantity += 1;
            } else {
                selectedProducts.push({
                    id: id,
                    price: price,
                    quantity: 1,
                    maxQuantity: quantityInStock,
                    name: document.querySelector(`tr[data-id='${id}'] td:nth-child(2)`).innerText,
                    image: document.querySelector(`tr[data-id='${id}'] img`).src
                });
            }

            renderSelectedProducts();
        };

        // Hiển thị danh sách sản phẩm đã chọn
        const renderTotalAmount = (totalAmount) => {
            document.getElementById("totalAmount").innerText = totalAmount.toLocaleString();
        };

        const renderSelectedProducts = () => {
            const tableBody = document.getElementById("selectedProductsTable");
            tableBody.innerHTML = ""; // Xóa nội dung cũ

            let totalAmount = 0; // Biến lưu tổng tiền

            selectedProducts.forEach((product, index) => {
                const row = document.createElement("tr");
                const totalPrice = product.price * product.quantity; // Tính thành tiền cho từng sản phẩm
                totalAmount += totalPrice; // Cộng dồn vào tổng tiền

                row.innerHTML = `
                                                                                                                                                                                                                                <td>${index + 1}</td>
                                                                                                                                                                                                                                <td>${product.name}</td>
                                                                                                                                                                                                                                <td>${product.price}</td>
                                                                                                                                                                                                                                <td>
                                                                                                                                                                                                                                    <input type="number"
                                                                                                                                                                                                                                           id="quantityInput-${product.id}"
                                                                                                                                                                                                                                           class="form-control form-control-sm"
                                                                                                                                                                                                                                           min="1"
                                                                                                                                                                                                                                           max="${product.maxQuantity}"
                                                                                                                                                                                                                                           value="${product.quantity}"
                                                                                                                                                                                                                                           onchange="updateQuantity(${product.id}, this.value)" />
                                                                                                                                                                                                                                    <span id="error-${product.id}" class="text-danger small"></span>
                                                                                                                                                                                                                                </td>
                                                                                                                                                                                                                                <td>${totalPrice.toLocaleString()} VND</td>
                                                                                                                                                                                                                                <td>
                                                                                                                                                                                                                                    <img src="${product.image}" alt="Product Image" style="width: 70px; height: 70px; object-fit: cover;" />
                                                                                                                                                                                                                                </td>
                                                                                                                                                                                                                                <td>
                                                                                                                                                                                                                                    <button class="btn btn-danger btn-sm" onclick="removeProduct(${product.id})">
                                                                                                                                                                                                                                        <i class="fa-solid fa-trash"></i>
                                                                                                                                                                                                                                    </button>
                                                                                                                                                                                                                                </td>
                                                                                                                                                                                                                            `;
                tableBody.appendChild(row);
            });

            // Cập nhật tổng tiền
            renderTotalAmount(totalAmount);
        };

        // Cập nhật số lượng sản phẩm
        const updateQuantity = (id, value) => {
            const product = selectedProducts.find(product => product.id === id);
            const errorSpan = document.getElementById(`error-${id}`);

            if (!product) return;

            const newQuantity = parseInt(value, 10);

            if (isNaN(newQuantity)) {
                showErrorForValidation(id, "Vui lòng nhập số lượng hợp lệ.");
                document.getElementById(`quantityInput-${id}`).value = product.quantity;
                return;
            }

            if (newQuantity > product.maxQuantity) {
                showErrorForValidation(id, `Không thể nhập quá số lượng tồn kho (${product.maxQuantity}).`);
                document.getElementById(`quantityInput-${id}`).value = product.quantity;
                return;
            }

            if (newQuantity < 1) {
                showErrorForValidation(id, "Số lượng phải lớn hơn hoặc bằng 1.");
                document.getElementById(`quantityInput-${id}`).value = product.quantity;
                return;
            }

            clearError(id);

            product.quantity = newQuantity;

            renderSelectedProducts(); // Cập nhật lại giao diện
        };

        // Xóa sản phẩm khỏi danh sách
        const removeProduct = (id) => {
            selectedProducts = selectedProducts.filter(product => product.id !== id);
            renderSelectedProducts();
        };

        // Hiển thị thông báo lỗi
        const showErrorForValidation = (id, message) => {
            const errorSpan = document.getElementById(`error-${id}`);
            errorSpan.innerText = message;
        };

        // Xóa thông báo lỗi
        const clearError = (id) => {
            const errorSpan = document.getElementById(`error-${id}`);
            errorSpan.innerText = "";
        };



        const copyTotalToClipboard = () => {
            const totalAmountElement = document.getElementById("totalAmount");
            const totalAmountText = totalAmountElement.innerText; // Lấy giá trị tổng tiền (chuỗi)

            const valueToCopy = totalAmountText.replace(/\sVND$/, "");

            // Sử dụng Clipboard API
            navigator.clipboard.writeText(valueToCopy).then(() => {
                // Hiển thị thông báo khi sao chép thành công
                alert(`Đã sao chép: ${valueToCopy} vào bộ nhớ đệm`);
            }).catch(err => {
                // Xử lý lỗi (nếu có)
                console.error("Không thể sao chép tổng tiền vào bộ nhớ đệm: ", err);
                alert("Có lỗi xảy ra khi sao chép tổng tiền!");
            });
        };


        //hàm thêm 1 sản phẩm mới



        var flagValidationCreateProduct = true;
        const CreateProduct = () => {
            flagValidationCreateProduct = true;


            let getTitle = document.querySelector('[name="Title"]').value;
            let getDescription = document.querySelector('[name="Description"]').value;
            let getPriceDefault = document.querySelector('[name="PriceDefault"]').value;
            let getQuantity = document.querySelector('[name="Quantity"]').value;
            let getPackagingId = document.querySelector('[name="PackagingId"]').value;
            let getCategoriesId = [...document.querySelectorAll('[name="SelectedSubCategories"]:checked')].map(input => input.value);
            let getProductItems = selectedProducts.map(product => ({
                id: product.id,
                quantity: product.quantity
            }));


            //validation phía client
            if (!getTitle.trim()) {
                showErrorForCreateProduct('Title', 'Tiêu đề không được để trống!');

            } else {
                clearErrorForCreateProduct('Title');
            }

            if (!getDescription.trim()) {
                showErrorForCreateProduct('Description', 'Mô tả không được để trống!');
            } else {
                clearErrorForCreateProduct('Description');
            }

            if (parseInt(getPriceDefault) <= 0) {
                showErrorForCreateProduct('PriceDefault', 'Giá bán phải > 0');
            } else {
                clearErrorForCreateProduct('PriceDefault');
            }

            if (!getPriceDefault.trim()) {
                showErrorForCreateProduct('PriceDefault', 'Giá bán không được để trống');
            }
            else {
                clearErrorForCreateProduct('PriceDefault');
            }

            if (parseInt(getQuantity) <= 0) {
                showErrorForCreateProduct('Quantity', 'Số lượng phải > 0');
            } else {
                clearErrorForCreateProduct('Quantity');
            }

            if (!getQuantity.trim()) {
                showErrorForCreateProduct('Quantity', 'Số lượng không được để trống');
            }
            else {
                clearErrorForCreateProduct('Quantity');
            }




            if (getCategoriesId.length < 1) {
                showErrorForCreateProduct('CategoriesId', 'Phải thuộc về ít nhất một danh mục');
            } else {
                clearErrorForCreateProduct('CategoriesId');
            }
            if (getProductItems.length < 1) {
                showErrorForCreateProduct('ProductsItem', 'Phải có ít nhất một sản phẩm');
            } else {
                clearErrorForCreateProduct('ProductsItem');
            }
            if (flagValidationCreateProduct === false) {
                return;
            }


            showConfirm("Bạn muốn tạo sản phẩm để bán này chứ?", () => {
                const productData = {
                    title: getTitle,
                    description: getDescription,
                    priceDefault: getPriceDefault,
                    quantity: getQuantity,
                    packagingId: getPackagingId,
                    categoriesId: getCategoriesId,
                    productItems: getProductItems
                };


                fetchPost('/api/admin/quan-li-sp/create', productData,
                    (rs) => {
                        showSuccess(rs.message);
                    },
                    (rs) => {
                        showErrorHTML(rs.message);
                    }, () => {
                        showError('Có lỗi xảy ra khi tạo sản phẩm.');
                    });


            });
        };

        // Hiển thị lỗi cho các trường không hợp lệ
        const showErrorForCreateProduct = (fieldId, message) => {
            const errorSpan = document.getElementById(`error${fieldId}`);
            errorSpan.innerText = message;
            flagValidationCreateProduct = false;
        };

        // Xóa lỗi khi trường hợp lệ
        const clearErrorForCreateProduct = (fieldId) => {
            const errorSpan = document.getElementById(`error${fieldId}`);
            errorSpan.innerText = '';
        };


        const HanlderFilterProductItem = () => {
            // filter theo selectbox
            const selectBox = document.querySelector(".section-filter-by-category select");
            const selectedOption = selectBox.options[selectBox.selectedIndex];
            const selectedDataId = selectedOption.getAttribute('data-idcategory'); // Lấy giá trị của attribute data-idcategory
            //lấy giá trị ô input tìm kiếm
            const elementInput = document.querySelector(".section-search input");
            const searchTerm = elementInput.value.toLowerCase();
            const rows = document.querySelectorAll('#product-table-body .product-row');
            for (const row of rows) {
                const productName = row.querySelector('td:nth-child(2)').textContent.toLowerCase(); // Lấy tên sản phẩm (cột 2)
                const categoryId = row.getAttribute("data-idcategory");
                if (productName.includes(searchTerm)) {
                    row.style.display = '';
                    if (selectedDataId !== "-1") {
                        if (selectedDataId === categoryId) {
                            row.style.display = '';
                        }
                        else {
                            row.style.display = 'none';
                        }
                    }
                } else {
                    row.style.display = 'none';
                }
            }
        }
    </script>
}