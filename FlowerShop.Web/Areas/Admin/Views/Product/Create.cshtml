@model FlowerShop.Web.ViewModels.ProductViewModel
@using Newtonsoft.Json;
@using FlowerShop.Common.Helpers;
@using FlowerShop.DataAccess.Models
@{
    ViewData["Title"] = "Thêm sản phẩm để bán";

    var ProductsItem = ViewBag.ProductsItem as IEnumerable<ProductItem>;

    var stt = 1;
}

@section CustomStyles {
    <style>
        .box-input .box-item {
            width: 600px;
        }
    </style>
}

<h1>@ViewData["Title"]</h1>
<hr />
<div class="row">
    <div class="col-6">
        <div class="box-input">
            <div class="box-item">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="PriceDefault" class="control-label"></label>
                <input asp-for="PriceDefault" class="form-control" />
                <span asp-validation-for="PriceDefault" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="box-item">
                <label asp-for="PackagingId" class="control-label"></label>
                <button class="btn btn-info btn-sm" onclick="RedirectToAddPackaging()"><i class="fa-solid fa-plus"></i></button>
                <select asp-for="PackagingId" class="form-control" asp-items="ViewBag.PackagingId"></select>
            </div>
        </div>

        <div class="box-productsitem">
            <table class="table">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>Tên sản phẩm</th>
                        <th>Giá</th>
                        <th>Số lượng</th>
                        <th>Thành tiền</th>
                        <th>Hình ảnh</th>
                        <th>Xóa</th>
                    </tr>
                </thead>
                <tbody id="selectedProductsTable">
                    <!-- Các sản phẩm được thêm sẽ hiển thị ở đây -->
                </tbody>
            </table>
            <div class="text-right font-weight-bold mt-3" onclick="copyTotalToClipboard()">
                Tổng tiền: <span id="totalAmount">0</span> VND
            </div>



        </div>


    </div>
    <div class="col-6">

        <h3>Sản phẩm trong kho</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        STT
                    </th>
                    <th>
                        Tên sản phẩm
                    </th>
                    <th>
                        Giá nhập
                    </th>
                    <th>
                        Số lượng tồn
                    </th>
                    <th>
                        Hình ảnh
                    </th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in ProductsItem)
                {
                    <tr data-id="@item.Id">
                        <td>
                            @(stt++)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @{
                                var priceConverted = Converter.ConvertToVietnameseDong(item.ImportPrice);
                            }
                            @Html.DisplayFor(modelItem => priceConverted)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Quantity)
                        </td>
                        <td>
                            @{
                                string[] listImg = item.Images != null
                                ? JsonConvert.DeserializeObject<string[]>(item.Images)
                                : new string[] { "no_img.png" };

                                var firstImg = listImg[0];
                            }
                            <img src="@Url.Content("~/images/products/" + firstImg)" alt="Product Image" style="width: 70px; height: 70px; object-fit: cover;" />
                        </td>
                        <td>
                            <button class="btn btn-info" onclick="AddProductItemToProduct(@item.Id, '@item.ImportPrice', @item.Quantity)">
                                <i class="fa-solid fa-plus"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>
</div>



<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>

    //phần thêm cách đóng gói
    const RedirectToAddPackaging = () => {
        alert("hi");
    };





    //phần add ProductItem vào Product
    let selectedProducts = []; // Lưu danh sách sản phẩm đã chọn

    // Thêm sản phẩm từ kho vào danh sách sản phẩm để bán
    const AddProductItemToProduct = (id, price, quantityInStock) => {
        const existingProduct = selectedProducts.find(product => product.id === id);

        if (existingProduct) {
            if (existingProduct.quantity + 1 > quantityInStock) {
                showError(existingProduct.id, `Không thể thêm sản phẩm. Số lượng tồn kho chỉ còn ${quantityInStock}.`);
                return;
            }
            existingProduct.quantity += 1;
        } else {
            selectedProducts.push({
                id: id,
                price: price,
                quantity: 1,
                maxQuantity: quantityInStock,
                name: document.querySelector(`tr[data-id='${id}'] td:nth-child(2)`).innerText,
                image: document.querySelector(`tr[data-id='${id}'] img`).src
            });
        }

        renderSelectedProducts();
    };

    // Hiển thị danh sách sản phẩm đã chọn
    const renderTotalAmount = (totalAmount) => {
        document.getElementById("totalAmount").innerText = totalAmount.toLocaleString();
    };

    const renderSelectedProducts = () => {
        const tableBody = document.getElementById("selectedProductsTable");
        tableBody.innerHTML = ""; // Xóa nội dung cũ

        let totalAmount = 0; // Biến lưu tổng tiền

        selectedProducts.forEach((product, index) => {
            const row = document.createElement("tr");
            const totalPrice = product.price * product.quantity; // Tính thành tiền cho từng sản phẩm
            totalAmount += totalPrice; // Cộng dồn vào tổng tiền

            row.innerHTML = `
                <td>${index + 1}</td>
                <td>${product.name}</td>
                <td>${product.price}</td>
                <td>
                    <input type="number"
                           id="quantityInput-${product.id}"
                           class="form-control form-control-sm"
                           min="1"
                           max="${product.maxQuantity}"
                           value="${product.quantity}"
                           onchange="updateQuantity(${product.id}, this.value)" />
                    <span id="error-${product.id}" class="text-danger small"></span>
                </td>
                <td>${totalPrice.toLocaleString()} VND</td>
                <td>
                    <img src="${product.image}" alt="Product Image" style="width: 70px; height: 70px; object-fit: cover;" />
                </td>
                <td>
                    <button class="btn btn-danger btn-sm" onclick="removeProduct(${product.id})">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });

        // Cập nhật tổng tiền
        renderTotalAmount(totalAmount);
    };

    // Cập nhật số lượng sản phẩm
    const updateQuantity = (id, value) => {
        const product = selectedProducts.find(product => product.id === id);
        const errorSpan = document.getElementById(`error-${id}`);

        if (!product) return;

        const newQuantity = parseInt(value, 10);

        if (isNaN(newQuantity)) {
            showError(id, "Vui lòng nhập số lượng hợp lệ.");
            document.getElementById(`quantityInput-${id}`).value = product.quantity;
            return;
        }

        if (newQuantity > product.maxQuantity) {
            showError(id, `Không thể nhập quá số lượng tồn kho (${product.maxQuantity}).`);
            document.getElementById(`quantityInput-${id}`).value = product.quantity;
            return;
        }

        if (newQuantity < 1) {
            showError(id, "Số lượng phải lớn hơn hoặc bằng 1.");
            document.getElementById(`quantityInput-${id}`).value = product.quantity;
            return;
        }

        clearError(id);

        product.quantity = newQuantity;

        renderSelectedProducts(); // Cập nhật lại giao diện
    };

    // Xóa sản phẩm khỏi danh sách
    const removeProduct = (id) => {
        selectedProducts = selectedProducts.filter(product => product.id !== id);
        renderSelectedProducts();
    };

    // Hiển thị thông báo lỗi
    const showError = (id, message) => {
        const errorSpan = document.getElementById(`error-${id}`);
        errorSpan.innerText = message;
    };

    // Xóa thông báo lỗi
    const clearError = (id) => {
        const errorSpan = document.getElementById(`error-${id}`);
        errorSpan.innerText = "";
    };



    const copyTotalToClipboard = () => {
        const totalAmountElement = document.getElementById("totalAmount");
        const totalAmountText = totalAmountElement.innerText; // Lấy giá trị tổng tiền (chuỗi)

        // Tạo giá trị cần sao chép (bỏ đi 'VND' nếu không cần thiết)
        const valueToCopy = totalAmountText.replace(/\sVND$/, ""); // Loại bỏ ' VND'

        // Sử dụng Clipboard API
        navigator.clipboard.writeText(valueToCopy).then(() => {
            // Hiển thị thông báo khi sao chép thành công
            alert(`Đã sao chép: ${valueToCopy} vào bộ nhớ đệm`);
        }).catch(err => {
            // Xử lý lỗi (nếu có)
            console.error("Không thể sao chép tổng tiền vào bộ nhớ đệm: ", err);
            alert("Có lỗi xảy ra khi sao chép tổng tiền!");
        });
    };




  

</script>
