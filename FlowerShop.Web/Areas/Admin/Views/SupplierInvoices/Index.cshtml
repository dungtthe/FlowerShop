@model IEnumerable<FlowerShop.DataAccess.Models.SupplierInvoice>

@{
	ViewData["Title"] = "Hóa đơn nhập chờ xác nhận";
}
<style>
	tbody tr {
		cursor: pointer; /* Thay đổi con trỏ chuột thành kiểu pointer */
	}

		tbody tr:hover {
			background-color: #f0f8ff; /* Màu nền nhạt khi lướt qua */
		}
</style>

<h1>Danh sách hóa đơn nhập hàng chờ xác nhận</h1>

<div class="mb-3" style="position: relative; width: 460px;">
	<input type="text" id="searchBox"
		   class="form-control pr-5"
		   placeholder="Nhập tên nhà cung cấp hoặc mã đơn hàng để tìm kiếm"
		   oninput="searchOrders()" />
	<i class="fa fa-search" style="position: absolute; top: 50%; right: 10px; transform: translateY(-50%); color: gray;"></i>
</div>

<table class="table">
	<thead>
		<tr>
			<th>
				Mã đơn hàng
			</th>
			<th>
				Tên nhà cung cấp
			</th>
			<th>
				Ngày khởi tạo
			</th>
			<th>
				Tổng tiền
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			// Lấy tổng tiền cho từng hóa đơn nhập
			// Lấy tổng tiền từ ViewData theo mã hóa đơn
			float tongTien = 0;
			if (ViewData["InvoiceTotals"] != null && ((Dictionary<int, float>)ViewData["InvoiceTotals"]).ContainsKey(item.Id))
			{
				tongTien = ((Dictionary<int, float>)ViewData["InvoiceTotals"])[item.Id];
			}
			<tr id="hoadon-row-@item.Id" ondblclick="ShowOrderDetails(@item.Id)">
				<td class="text-center" style="padding-right:70px">
					@Html.DisplayFor(modelItem => item.Id)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Supplier.CompanyName)
				</td>
				<td>
					@item.CreateDay.ToString("dd/MM/yyyy")
				</td>
				<td>
					@string.Format(new System.Globalization.CultureInfo("vi-VN"), "{0:C}", tongTien)
				</td>
				<td class="text-center">
					<!-- Nút xác nhận -->
					<button onclick="ConfirmInvoiceById(@item.Id)"
							class="btn btn-success btn-sm"
							data-toggle="tooltip"
							style="width: 95px;"
							title="Xác nhận đơn nhập">
						<i class="fa-solid fa-check"></i> Xác nhận
					</button>
					<!-- Khoảng cách giữa các nút -->
					<span style="margin: 0 5px;"></span>
					<!-- Nút húy  -->
					<button onclick="Fail(@item.Id)"
							class="btn btn-danger btn-sm"
							data-toggle="tooltip"
							style="width: 95px;"
							title="Hủy đơn nhập">
						<i class="fa-solid fa-trash"></i> Hủy
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>
@await Html.PartialAsync("_CancelOrderBox")

<script>
	// Hoàn tất đơn nhập hàng
	const ConfirmInvoiceById = (id) => {
		showConfirm("Đơn nhập hàng này đã hoàn tất?", () => {
			const reqData = { id: id };
			fetchPost('/api/admin/quan-li-don-nhap/xac-nhan', reqData,
				(response) => {
					// Xóa dòng trong bảng
					const row = document.getElementById('hoadon-row-' + id);
					if (row) {
						row.remove();
					}
					setTimeout(() => {
						showSuccess(response.message);
					}, 500);

				},
				(response) => {
					showError(response.message);
				},
				() => {
					showError("Có lỗi xảy ra khi kết nối đến máy chủ.");
				}
			);
		});
	};

	//Hủy đơn nhập hàng
	let currentOrderIdToCancel = null;
	const Fail = (id) => {
		// Lưu mã đơn hàng vào biến toàn cục
		currentOrderIdToCancel = id;
		document.getElementById('cancelOrderModalLabel').innerText = "Nhập lý do hủy đơn nhập";
		document.getElementById('cancelReason').placeholder = "Lý do hủy..."
		// Hiển thị modal yêu cầu nhập lý do hủy
		$('#cancelOrderModal').modal('show');
	};
	const submitCancelOrder = () => {
		const cancelReason = document.getElementById("cancelReason").value.trim();

		if (!cancelReason) {
			showError("Bạn phải nhập lý hủy đơn nhập.");
			return;
		}

		const reqData = { id: currentOrderIdToCancel, reason: cancelReason };

		fetchPost('/api/admin/quan-li-don-nhap/huy', reqData,
			(response) => {
				const row = document.getElementById('hoadon-row-' + currentOrderIdToCancel);
				if (row) {
					row.remove();
				}
				$('#cancelOrderModal').modal('hide');
				setTimeout(() => {
					showSuccess(response.message);
				}, 500);
			},
			(response) => {
				showError(response.message);
			},
			() => {
				showError("Có lỗi xảy ra khi kết nối đến máy chủ.");
			}
		);
	};

 	//Tìm kiếm 
	const searchOrders = () => {
		const query = document.getElementById("searchBox").value.toLowerCase(); // Lấy giá trị tìm kiếm và chuyển thành chữ thường
		const rows = document.querySelectorAll("tbody tr"); // Lấy tất cả các dòng trong bảng

		rows.forEach(row => {
			const orderId = row.querySelector("td:nth-child(1)").innerText.toLowerCase(); // Lấy mã đơn hàng
			const supplierName = row.querySelector("td:nth-child(2)").innerText.toLowerCase(); // Lấy tên 

			// Kiểm tra xem mã đơn hàng hoặc tên  có chứa chuỗi tìm kiếm hay không
			if (orderId.includes(query) || supplierName.includes(query)) {
				row.style.display = ""; // Hiển thị dòng
			} else {
				row.style.display = "none"; // Ẩn dòng
			}
		});
	};
	
</script>