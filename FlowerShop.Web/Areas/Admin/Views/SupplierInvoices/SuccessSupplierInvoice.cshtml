@model IEnumerable<FlowerShop.DataAccess.Models.SupplierInvoice>

@{
	ViewData["Title"] = "Hóa đơn nhập đã hoàn ất";
}
<style>
	tbody tr {
		cursor: pointer; /* Thay đổi con trỏ chuột thành kiểu pointer */
	}

		tbody tr:hover {
			background-color: #f0f8ff; /* Màu nền nhạt khi lướt qua */
		}
</style>

<h1>Danh sách hóa đơn nhập hoàn tất</h1>

<div class="mb-3" style="position: relative; width: 460px;">
	<input type="text" id="searchBox"
		   class="form-control pr-5"
		   placeholder="Nhập tên nhà cung cấp hoặc mã đơn hàng để tìm kiếm"
		   oninput="searchOrders()" />
	<i class="fa fa-search" style="position: absolute; top: 50%; right: 10px; transform: translateY(-50%); color: gray;"></i>
</div>

<table class="table">
	<thead>
		<tr>
			<th style="width:144px">
				Mã đơn hàng
			</th>
			<th>
				Tên nhà cung cấp
			</th>
			<th>
				Ngày khởi tạo
			</th>
			<th>
				Tổng tiền
			</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			// Lấy tổng tiền cho từng hóa đơn nhập
			// Lấy tổng tiền từ ViewData theo mã hóa đơn
			float tongTien = 0;
			if (ViewData["InvoiceTotals"] != null && ((Dictionary<int, float>)ViewData["InvoiceTotals"]).ContainsKey(item.Id))
			{
				tongTien = ((Dictionary<int, float>)ViewData["InvoiceTotals"])[item.Id];
			}
			<tr id="hoadon-row-@item.Id" ondblclick="ShowOrderDetails(@item.Id)">
				<td class="text-center" style="padding-right:60px">
					@Html.DisplayFor(modelItem => item.Id)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Supplier.CompanyName)
				</td>
				<td>
					@item.CreateDay.ToString("dd/MM/yyyy")
				</td>
				<td>
					@string.Format(new System.Globalization.CultureInfo("vi-VN"), "{0:C}", tongTien)
				</td>
			</tr>
		}
	</tbody>
</table>

@await Html.PartialAsync("_OrderDetailsModal")

<script>
	//Tìm kiếm
	const searchOrders = () => {
		const query = document.getElementById("searchBox").value.toLowerCase(); // Lấy giá trị tìm kiếm và chuyển thành chữ thường
		const rows = document.querySelectorAll("tbody tr"); // Lấy tất cả các dòng trong bảng

		rows.forEach(row => {
			const orderId = row.querySelector("td:nth-child(1)").innerText.toLowerCase(); // Lấy mã đơn hàng
			const supplierName = row.querySelector("td:nth-child(2)").innerText.toLowerCase(); // Lấy tên

			// Kiểm tra xem mã đơn hàng hoặc tên  có chứa chuỗi tìm kiếm hay không
			if (orderId.includes(query) || supplierName.includes(query)) {
				row.style.display = ""; // Hiển thị dòng
			} else {
				row.style.display = "none"; // Ẩn dòng
			}
		});
	};

	//Hiển thị thông tin đơn nhập hàng
	function ShowOrderDetails(orderId) {
		if (!orderId) {
			showError("Không tìm thấy đơn hàng");
			return;
		}
		try {
			// Lấy thông tin từ row được chọn (tr) thông qua orderId
			const row = document.querySelector(`#hoadon-row-${orderId}`);
			const supplierName = row.querySelector('td:nth-child(2)').innerText; // Tên nhà cung vấp
			const createDate = row.querySelector('td:nth-child(3)').innerText;  // Ngày tạo đơn hàng
			const tongTien = row.querySelector('td:nth-child(4)').innerText;  // Tổng tiền

			// Đặt thông tin khách hàng và ngày tạo hóa đơn vào modal
			document.getElementById("customerName").innerText = supplierName;
			document.getElementById("createDate").innerText = createDate;
			//Đổi thông tin
			document.getElementById('orderDetailsModalLabel').innerText = "Chi Tiết Đơn Nhập Hàng";
			document.getElementById('name').innerText = "Tên nhà cung cấp:";
			document.getElementById('date').innerText = "Ngày tạo đơn nhập hàng:"
			document.getElementById('orderTotal').innerText = tongTien;

			fetchGet(`/api/admin/quan-li-don-nhap/chi-tiet-don-nhap/${orderId}`,
				(response) => {
					console.log(response);
					let tableBody = "";
					response.forEach(item => {
						let thanhTien = item.unitPrice * item.quantity; // Thành tiền cho từng sản phẩm
						tableBody += `
																				<tr>
																					<td >${item.productItemId}</td>
																					<td>${item.productItem.name}</td>
																					<td>${item.quantity}</td>
																					<td>${item.unitPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
																					<td>${thanhTien.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
																				</tr>
																				`;
					});

					// Cập nhật nội dung bảng và tổng cộng
					document.querySelector("#orderDetailsTable tbody").innerHTML = tableBody;
					$('#orderDetailsModal').modal('show');
				},
				(errorResponse) => {
					console.error(errorResponse);
					showError(errorResponse.message);
				},
				() => {
					showError("Không thể kết nối tới server");
				});

			// Đổi màu của dòng khi nhấn double-click
			const rowToHighlight = document.querySelector(`#hoadon-row-${orderId}`);
			if (rowToHighlight) {
				rowToHighlight.style.backgroundColor = "#f0f8ff"; // Màu nhạt báo hiệu
				setTimeout(() => {
					rowToHighlight.style.backgroundColor = ""; // Khôi phục màu ban đầu
				}, 2000);
			}
		} catch (error) {
			console.error(error);
			showError("Đã xảy ra lỗi khi lấy chi tiết đơn hàng.");
		}
	}

</script>